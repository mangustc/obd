package view

import (
	"strconv"
	"github.com/mangustc/obd/schema"
	"fmt"
	"net/http"
	"github.com/mangustc/obd/schema/jobschema"
)

templ Layout(title string) {
	<!DOCTYPE html>
	<head>
		<title>{ title }</title>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<meta charset="utf-8"/>
		<script src="https://unpkg.com/htmx.org@1.9.12" integrity="sha384-ujb1lZYygJmzgSwoxRggbCHcjc0rB2XoQrxeTUQyRjrOnlCoYta87iKBWq3EsdM2" crossorigin="anonymous"></script>
		<meta name="htmx-config" content='{"useTemplateFragments":"true"}'/>
		<link rel="stylesheet" href="/css/index.css" media="screen"/>
	</head>
	<body>
		<script>
document.addEventListener("DOMContentLoaded", (event) => {
	document.body.addEventListener('htmx:beforeSwap', function(evt) {
		if (evt.detail.xhr.status == 422 || evt.detail.xhr.status == 404) {
			evt.detail.shouldSwap = true;
			evt.detail.isError = false;
		} else if (evt.detail.xhr.status == 200) {
			// document.getElementById("user-output-error").innerHTML = ""
		}
	});
});
		</script>
		<div class="root-container">
			@Navigation(nil)
			<div id="main" class="outlet-container">
				{ children... }
			</div>
		</div>
	</body>
}

templ ErrorIndex(code int) {
	<div id="main" hx-swap-oob="innerHTML">
		<h2>{ strconv.Itoa(code) + " - " + http.StatusText(code) }</h2>
	</div>
}

css widthCSS(str string) {
	width: { str };
}

templ tableHeader(header *schema.TableHeaderColumn) {
	<th class={ widthCSS(fmt.Sprint(header.Percent, "%")) }>{ header.Name }</th>
}

func getBool(v any) bool {
	value, _ := v.(bool)
	return value
}

func getString(v any) string {
	value, _ := v.(string)
	return value
}

templ Input(input *schema.Input) {
	<div style="display: flex; flex-direction: row;">
		if input.InputTitle != "" {
			<span>{ input.InputTitle }: </span>
		}
		if input.InputOptions != nil {
			if !input.InputEditable {
				<input name={ input.InputName } value={ schema.GetSelectedInputOptionLabel(input) } type={ input.InputType } readonly?={ !input.InputEditable }/>
			} else {
				<select name={ input.InputName }>
					for _, inputOption := range input.InputOptions {
						<option
							label={ inputOption.InputOptionLabel }
							value={ inputOption.InputOptionValue }
							selected?={ inputOption.InputOptionValue == input.InputOptionValueSelected }
						>{ inputOption.InputOptionLabel }</option>
					}
				</select>
			}
		} else if input.InputType == "checkbox" {
			if !input.InputEditable {
				<input name={ input.InputName } type={ input.InputType } checked?={ getBool(input.InputValue) } onclick="return false;"/>
			} else {
				<input name={ input.InputName } type={ input.InputType } checked?={ getBool(input.InputValue) }/>
			}
		} else {
			<input name={ input.InputName } value={ getString(input.InputValue) } type={ input.InputType } readonly?={ !input.InputEditable }/>
		}
	</div>
}

templ Navigation(jobDB *jobschema.JobDB) {
	<div class="navigation-container">
		<div class="link-container">
			if jobDB == nil {
				<button
					class="link-button"
					hx-post="/api/auth"
					hx-target="#main"
					hx-swap="innerHTML"
				>Au</button>
			} else {
				if jobDB.JobAccessUser {
					<button class="link-button">Us</button>
				}
				if jobDB.JobAccessJob {
					<button class="link-button">J</button>
				}
				if jobDB.JobAccessStudent {
					<button class="link-button">St</button>
				}
				if jobDB.JobAccessUniGroup {
					<button class="link-button">UnG</button>
				}
				if jobDB.JobAccessFinhelpCtg {
					<button class="link-button">FC</button>
				}
				if jobDB.JobAccessFinhelpStage {
					<button class="link-button">FS</button>
				}
				if jobDB.JobAccessFinhelpProc {
					<button class="link-button">FP</button>
				}
				if jobDB.JobAccessBuilding {
					<button class="link-button">B</button>
				}
				if jobDB.JobAccessCabinetType {
					<button class="link-button">CT</button>
				}
				if jobDB.JobAccessCabinet {
					<button class="link-button">C</button>
				}
				if jobDB.JobAccessClassType {
					<button class="link-button">ClT</button>
				}
				if jobDB.JobAccessProf {
					<button class="link-button">Pr</button>
				}
				if jobDB.JobAccessCourseType {
					<button class="link-button">CT</button>
				}
				if jobDB.JobAccessCourse {
					<button class="link-button">C</button>
				}
				if jobDB.JobAccessPerf {
					<button class="link-button">P</button>
				}
				if jobDB.JobAccessSkip {
					<button class="link-button">Sk</button>
				}
				if jobDB.JobAccessClass {
					<button class="link-button">Cl</button>
				}
				if jobDB.JobAccessSession {
					<button class="link-button">S</button>
				}
			}
		</div>
	</div>
}

templ TableRowEdit(inputs []*schema.Input, bodyVals string, updatePOSTURL string, deletePOSTURL string) {
	<tr>
		for _, i := range inputs {
			<th>
				@Input(i)
			</th>
		}
		<th>
			<button
				hx-post={ updatePOSTURL }
				hx-target="closest tr"
				hx-include="closest tr"
				hx-swap="outerHTML"
				hx-vals={ bodyVals }
			>Save</button>
			<button
				hx-post={ deletePOSTURL }
				hx-target="closest tr"
				hx-swap="outerHTML"
				hx-vals={ bodyVals }
			>Delete</button>
		</th>
	</tr>
}

templ TableRow(inputs []*schema.Input, bodyVals string, editPOSTURL string, deletePOSTURL string) {
	<tr>
		for _, i := range inputs {
			<th>
				@Input(schema.NewInputNotEditable(i))
			</th>
		}
		<th>
			<button
				hx-post={ editPOSTURL }
				hx-target="closest tr"
				hx-swap="outerHTML"
				hx-vals={ bodyVals }
			>Edit</button>
			<button
				hx-post={ deletePOSTURL }
				hx-target="closest tr"
				hx-swap="outerHTML"
				hx-vals={ bodyVals }
			>Delete</button>
		</th>
	</tr>
}

//templ TableRowOOB(alist []any, bodyVals string, editPOSTURL string, deletePOSTURL string) {
//	<tbody hx-swap-oob="afterbegin:#table">
//		@TableRow(alist, bodyVals, editPOSTURL, deletePOSTURL)
//	</tbody>
//}
templ Table(title string, getPOSTURL string, headers []*schema.TableHeaderColumn) {
	<div style="width: 100%; display: flex; flex-direction: column;">
		<h2>{ title } Entries:</h2>
		<table>
			<thead>
				<tr>
					for _, header := range headers {
						@tableHeader(header)
					}
					@tableHeader(schema.NewTableHeaderColumn("Actions", 20))
				</tr>
			</thead>
			<tbody id="table" hx-target="closest tr" hx-swap="outerHTML">
				<tr hx-swap="outerHTML" hx-trigger="load" hx-post={ getPOSTURL }></tr>
			</tbody>
		</table>
	</div>
}

templ InsertForm(title string, insertPOSTURL string, inputs []*schema.Input) {
	<div id="insertForm" style="width: 100%; display: flex; flex-direction: column;">
		<h2>Insert { title } form:</h2>
		<div>
			for _, i := range inputs {
				@Input(i)
			}
			<th></th>
		</div>
		<button
			hx-post={ insertPOSTURL }
			hx-target="#table"
			hx-include="closest div"
			hx-swap="afterbegin"
		>Insert</button>
	</div>
}
