// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package jobview

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/mangustc/obd/schema"
	"github.com/mangustc/obd/schema/jobschema"
	"github.com/mangustc/obd/view"
)

const (
	pageTitle       = "Job"
	tableTitle      = pageTitle
	insertFormTitle = tableTitle
	getPOSTURL      = "/api/job/getjobs"
	insertPOSTURL   = "/api/job/insertjob"
	editPOSTURL     = "/api/job/editjob"
	updatePOSTURL   = "/api/job/updatejob"
	deletePOSTURL   = "/api/job/deletejob"
	tn              = "Job"
	bodyVals        = `{"` + tn + `ID": %d}`
)

func getTableHeaders() []*schema.TableHeaderColumn {
	return []*schema.TableHeaderColumn{
		schema.NewTableHeaderColumn("Job Name", 30),
		schema.NewTableHeaderColumn("User", 4),
		schema.NewTableHeaderColumn("Job", 4),
		schema.NewTableHeaderColumn("Student", 4),
		schema.NewTableHeaderColumn("UniGroup", 4),
		schema.NewTableHeaderColumn("FinhelpCtg", 4),
		schema.NewTableHeaderColumn("FinhelpStage", 4),
		schema.NewTableHeaderColumn("FinhelpProc", 4),
		schema.NewTableHeaderColumn("Building", 4),
		schema.NewTableHeaderColumn("CabinetType", 4),
		schema.NewTableHeaderColumn("Cabinet", 4),
		schema.NewTableHeaderColumn("ClassType", 4),
		schema.NewTableHeaderColumn("Prof", 4),
		schema.NewTableHeaderColumn("CourseType", 4),
		schema.NewTableHeaderColumn("Course", 4),
		schema.NewTableHeaderColumn("Perf", 4),
		schema.NewTableHeaderColumn("Skip", 4),
		schema.NewTableHeaderColumn("Class", 4),
		schema.NewTableHeaderColumn("Session", 4),
	}
}

func getArrayFromJobDB(jobDB *jobschema.JobDB) []any {
	return []any{
		jobDB.JobName,
		jobDB.JobAccessUser,
		jobDB.JobAccessJob,
		jobDB.JobAccessStudent,
		jobDB.JobAccessUniGroup,
		jobDB.JobAccessFinhelpCtg,
		jobDB.JobAccessFinhelpStage,
		jobDB.JobAccessFinhelpProc,
		jobDB.JobAccessBuilding,
		jobDB.JobAccessCabinetType,
		jobDB.JobAccessCabinet,
		jobDB.JobAccessClassType,
		jobDB.JobAccessProf,
		jobDB.JobAccessCourseType,
		jobDB.JobAccessCourse,
		jobDB.JobAccessPerf,
		jobDB.JobAccessSkip,
		jobDB.JobAccessClass,
		jobDB.JobAccessSession,
	}
}

func getInsertFormInputs() []*schema.Input {
	return []*schema.Input{
		schema.NewInput("Name", tn+"Name", schema.StringInput, "", nil, nil, ""),
		schema.NewInput("User", tn+"AccessUser", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("Job", tn+"AccessJob", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("Student", tn+"AccessStudent", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("UniGroup", tn+"AccessUniGroup", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("FinhelpCtg", tn+"AccessFinhelpCtg", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("FinhelpStage", tn+"AccessFinhelpStage", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("FinhelpProc", tn+"AccessFinhelpProc", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("Building", tn+"AccessBuilding", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("CabinetType", tn+"AccessCabinetType", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("Cabinet", tn+"AccessCabinet", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("ClassType", tn+"AccessClassType", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("Prof", tn+"AccessProf", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("CourseType", tn+"AccessCourseType", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("Course", tn+"AccessCourse", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("Perf", tn+"AccessPerf", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("Skip", tn+"AccessSkip", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("Class", tn+"AccessClass", schema.BooleanInput, "", nil, nil, ""),
		schema.NewInput("Session", tn+"AccessSession", schema.BooleanInput, "", nil, nil, ""),
	}
}

func getInputsFromJobDB(jobDB *jobschema.JobDB) []*schema.Input {
	return []*schema.Input{
		schema.NewInput("", tn+"Name", schema.StringInput, jobDB.JobName, nil, nil, ""),
		schema.NewInput("", tn+"AccessUser", schema.BooleanInput, jobDB.JobAccessUser, nil, nil, ""),
		schema.NewInput("", tn+"AccessJob", schema.BooleanInput, jobDB.JobAccessJob, nil, nil, ""),
		schema.NewInput("", tn+"AccessStudent", schema.BooleanInput, jobDB.JobAccessStudent, nil, nil, ""),
		schema.NewInput("", tn+"AccessUniGroup", schema.BooleanInput, jobDB.JobAccessUniGroup, nil, nil, ""),
		schema.NewInput("", tn+"AccessFinhelpCtg", schema.BooleanInput, jobDB.JobAccessFinhelpCtg, nil, nil, ""),
		schema.NewInput("", tn+"AccessFinhelpStage", schema.BooleanInput, jobDB.JobAccessFinhelpStage, nil, nil, ""),
		schema.NewInput("", tn+"AccessFinhelpProc", schema.BooleanInput, jobDB.JobAccessFinhelpProc, nil, nil, ""),
		schema.NewInput("", tn+"AccessBuilding", schema.BooleanInput, jobDB.JobAccessBuilding, nil, nil, ""),
		schema.NewInput("", tn+"AccessCabinetType", schema.BooleanInput, jobDB.JobAccessCabinetType, nil, nil, ""),
		schema.NewInput("", tn+"AccessCabinet", schema.BooleanInput, jobDB.JobAccessCabinet, nil, nil, ""),
		schema.NewInput("", tn+"AccessClassType", schema.BooleanInput, jobDB.JobAccessClassType, nil, nil, ""),
		schema.NewInput("", tn+"AccessProf", schema.BooleanInput, jobDB.JobAccessProf, nil, nil, ""),
		schema.NewInput("", tn+"AccessCourseType", schema.BooleanInput, jobDB.JobAccessCourseType, nil, nil, ""),
		schema.NewInput("", tn+"AccessCourse", schema.BooleanInput, jobDB.JobAccessCourse, nil, nil, ""),
		schema.NewInput("", tn+"AccessPerf", schema.BooleanInput, jobDB.JobAccessPerf, nil, nil, ""),
		schema.NewInput("", tn+"AccessSkip", schema.BooleanInput, jobDB.JobAccessSkip, nil, nil, ""),
		schema.NewInput("", tn+"AccessClass", schema.BooleanInput, jobDB.JobAccessClass, nil, nil, ""),
		schema.NewInput("", tn+"AccessSession", schema.BooleanInput, jobDB.JobAccessSession, nil, nil, ""),
	}
}

func JobTableRowEdit(jobDB *jobschema.JobDB) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = view.TableRowEdit(getInputsFromJobDB(jobDB), fmt.Sprintf(bodyVals, jobDB.JobID), updatePOSTURL, deletePOSTURL).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func JobTableRow(jobDB *jobschema.JobDB) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = view.TableRow(getArrayFromJobDB(jobDB), fmt.Sprintf(bodyVals, jobDB.JobID), editPOSTURL, deletePOSTURL).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

//	templ JobTableRowOOB(jobDB *jobschema.JobDB) {
//		@view.TableRowOOB(getArrayFromJobDB(jobDB), fmt.Sprintf(bodyVals, jobDB.JobID), editPOSTURL, deletePOSTURL)
//	}
func JobTableRows(jobsDB []*jobschema.JobDB) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		for _, jobDB := range jobsDB {
			templ_7745c5c3_Err = JobTableRow(jobDB).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return templ_7745c5c3_Err
	})
}

func JobAddForm() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = view.InsertForm(insertFormTitle, insertPOSTURL, getInsertFormInputs()).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func JobTable() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = view.Table(tableTitle, getPOSTURL, getTableHeaders()).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func JobPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var6 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var6 == nil {
			templ_7745c5c3_Var6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var7 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = JobAddForm().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = JobTable().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = view.Layout(pageTitle).Render(templ.WithChildren(ctx, templ_7745c5c3_Var7), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
