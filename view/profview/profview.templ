package profview

import (
	"github.com/mangustc/obd/view"
	"github.com/mangustc/obd/schema"
	"github.com/mangustc/obd/schema/profschema"
	"fmt"
)

const (
	pageTitle       = "Преподаватели"
	tableTitle      = pageTitle
	insertFormTitle = "Преподавателя"
	getPOSTURL      = "/api/prof/getprofs"
	insertPOSTURL   = "/api/prof/insertprof"
	editPOSTURL     = "/api/prof/editprof"
	updatePOSTURL   = "/api/prof/updateprof"
	deletePOSTURL   = "/api/prof/deleteprof"
	profTN          = "Prof"
	bodyVals        = `{"` + profTN + `ID": %d}`
	getprofPOSTURL  = "/api/prof"
)

var (
	taProfLastname    = schema.NewTA(profTN+"Lastname", "Фамилия", schema.StringInput)
	taProfFirstname   = schema.NewTA(profTN+"Firstname", "Имя", schema.StringInput)
	taProfMiddlename  = schema.NewTA(profTN+"Middlename", "Отчество", schema.StringInput)
	taProfPhoneNumber = schema.NewTA(profTN+"PhoneNumber", "Номер телефона", schema.StringInput)
	taProfEmail       = schema.NewTA(profTN+"Email", "Почта", schema.StringInput)
	taProfIsHidden    = schema.NewTA(profTN+"IsHidden", "Скрыт", schema.BooleanInput)
)

func getTableHeaders() []*schema.TableHeaderColumn {
	return []*schema.TableHeaderColumn{
		schema.NewTableHeaderColumn(taProfLastname.TATitle, 15),
		schema.NewTableHeaderColumn(taProfFirstname.TATitle, 15),
		schema.NewTableHeaderColumn(taProfMiddlename.TATitle, 15),
		schema.NewTableHeaderColumn(taProfPhoneNumber.TATitle, 10),
		schema.NewTableHeaderColumn(taProfEmail.TATitle, 10),
		schema.NewTableHeaderColumn(taProfIsHidden.TATitle, 5),
	}
}

func getInsertFormInputs() []*schema.Input {
	return []*schema.Input{
		schema.NewInput(taProfLastname.TATitle, taProfLastname.TAName, taProfLastname.TAInputType, "", nil, nil, ""),
		schema.NewInput(taProfFirstname.TATitle, taProfFirstname.TAName, taProfFirstname.TAInputType, "", nil, nil, ""),
		schema.NewInput(taProfMiddlename.TATitle, taProfMiddlename.TAName, taProfMiddlename.TAInputType, "", nil, nil, ""),
		schema.NewInput(taProfPhoneNumber.TATitle, taProfPhoneNumber.TAName, taProfPhoneNumber.TAInputType, "", nil, nil, ""),
		schema.NewInput(taProfEmail.TATitle, taProfEmail.TAName, taProfEmail.TAInputType, "", nil, nil, ""),
	}
}

func getInputsFromProfDB(profDB *profschema.ProfDB) []*schema.Input {
	return []*schema.Input{
		schema.NewInput("", taProfLastname.TAName, taProfLastname.TAInputType, profDB.ProfLastname, nil, nil, ""),
		schema.NewInput("", taProfFirstname.TAName, taProfFirstname.TAInputType, profDB.ProfFirstname, nil, nil, ""),
		schema.NewInput("", taProfMiddlename.TAName, taProfMiddlename.TAInputType, profDB.ProfMiddlename, nil, nil, ""),
		schema.NewInput("", taProfPhoneNumber.TAName, taProfPhoneNumber.TAInputType, profDB.ProfPhoneNumber, nil, nil, ""),
		schema.NewInput("", taProfEmail.TAName, taProfEmail.TAInputType, profDB.ProfEmail, nil, nil, ""),
		schema.NewInput("", taProfIsHidden.TAName, taProfIsHidden.TAInputType, profDB.ProfIsHidden, nil, nil, ""),
	}
}

templ ProfTableRowEdit(profDB *profschema.ProfDB) {
	@view.TableRowEdit(getInputsFromProfDB(profDB), fmt.Sprintf(bodyVals, profDB.ProfID), updatePOSTURL, deletePOSTURL)
}

templ ProfTableRow(profDB *profschema.ProfDB) {
	@view.TableRow(getInputsFromProfDB(profDB), fmt.Sprintf(bodyVals, profDB.ProfID), editPOSTURL, deletePOSTURL)
}

templ ProfTableRows(profsDB []*profschema.ProfDB) {
	for _, profDB := range profsDB {
		@ProfTableRow(profDB)
	}
}

templ Prof() {
	@view.InsertForm(insertFormTitle, insertPOSTURL, getInsertFormInputs())
	@view.Table(tableTitle, getPOSTURL, getTableHeaders())
}

templ ProfPage() {
	@view.Layout(pageTitle) {
		<div
			hx-post={ getprofPOSTURL }
			hx-target="this"
			hx-swap="outerHTML"
			hx-trigger="load"
		></div>
	}
}
