package finhelpctgview

import (
	"github.com/mangustc/obd/view"
	"github.com/mangustc/obd/schema"
	"github.com/mangustc/obd/schema/finhelpctgschema"
	"fmt"
)

const (
	pageTitle            = "Материальная помощь Категории"
	tableTitle           = pageTitle
	insertFormTitle      = "Категории материальной помощи"
	getPOSTURL           = "/api/finhelpctg/getfinhelpctgs"
	insertPOSTURL        = "/api/finhelpctg/insertfinhelpctg"
	editPOSTURL          = "/api/finhelpctg/editfinhelpctg"
	updatePOSTURL        = "/api/finhelpctg/updatefinhelpctg"
	deletePOSTURL        = "/api/finhelpctg/deletefinhelpctg"
	finhelpCtgTN         = "FinhelpCtg"
	bodyVals             = `{"` + finhelpCtgTN + `ID": %d}`
	getfinhelpCtgPOSTURL = "/api/finhelpctg"
)

var (
	taFinhelpCtgID          = schema.NewTA(finhelpCtgTN+"ID", "Номер", schema.NumberInput)
	taFinhelpCtgDescription = schema.NewTA(finhelpCtgTN+"Description", "Описание", schema.StringInput)
	taFinhelpCtgPayment     = schema.NewTA(finhelpCtgTN+"Payment", "Выплата", schema.NumberInput)
	taFinhelpCtgIsHidden    = schema.NewTA(finhelpCtgTN+"IsHidden", "Скрыт", schema.BooleanInput)
)

func getTableHeaders() []*schema.TableHeaderColumn {
	return []*schema.TableHeaderColumn{
		schema.NewTableHeaderColumn(taFinhelpCtgID.TATitle, 5),
		schema.NewTableHeaderColumn(taFinhelpCtgDescription.TATitle, 63),
		schema.NewTableHeaderColumn(taFinhelpCtgPayment.TATitle, 7),
		schema.NewTableHeaderColumn(taFinhelpCtgIsHidden.TATitle, 5),
	}
}

func getInsertFormInputs() []*schema.Input {
	return []*schema.Input{
		schema.NewInput(taFinhelpCtgDescription.TATitle, taFinhelpCtgDescription.TAName, taFinhelpCtgDescription.TAInputType, "", nil, nil, ""),
		schema.NewInput(taFinhelpCtgPayment.TATitle, taFinhelpCtgPayment.TAName, taFinhelpCtgPayment.TAInputType, "", nil, nil, ""),
	}
}

func getInputsFromFinhelpCtgDB(finhelpCtgDB *finhelpctgschema.FinhelpCtgDB) []*schema.Input {
	return []*schema.Input{
		schema.NewInput("", taFinhelpCtgID.TAName, taFinhelpCtgID.TAInputType, finhelpCtgDB.FinhelpCtgID, nil, nil, ""),
		schema.NewInput("", taFinhelpCtgDescription.TAName, taFinhelpCtgDescription.TAInputType, finhelpCtgDB.FinhelpCtgDescription, nil, nil, ""),
		schema.NewInput("", taFinhelpCtgPayment.TAName, taFinhelpCtgPayment.TAInputType, finhelpCtgDB.FinhelpCtgPayment, nil, nil, ""),
		schema.NewInput("", taFinhelpCtgIsHidden.TAName, taFinhelpCtgIsHidden.TAInputType, finhelpCtgDB.FinhelpCtgIsHidden, nil, nil, ""),
	}
}

templ FinhelpCtgTableRowEdit(finhelpCtgDB *finhelpctgschema.FinhelpCtgDB) {
	@view.TableRowEdit(getInputsFromFinhelpCtgDB(finhelpCtgDB), fmt.Sprintf(bodyVals, finhelpCtgDB.FinhelpCtgID), updatePOSTURL, deletePOSTURL)
}

templ FinhelpCtgTableRow(finhelpCtgDB *finhelpctgschema.FinhelpCtgDB) {
	@view.TableRow(getInputsFromFinhelpCtgDB(finhelpCtgDB), fmt.Sprintf(bodyVals, finhelpCtgDB.FinhelpCtgID), editPOSTURL, deletePOSTURL)
}

templ FinhelpCtgTableRows(finhelpCtgsDB []*finhelpctgschema.FinhelpCtgDB) {
	for _, finhelpCtgDB := range finhelpCtgsDB {
		@FinhelpCtgTableRow(finhelpCtgDB)
	}
}

templ FinhelpCtg() {
	@view.InsertForm(insertFormTitle, insertPOSTURL, getInsertFormInputs())
	@view.Table(tableTitle, getPOSTURL, getTableHeaders())
}

templ FinhelpCtgPage() {
	@view.Layout(pageTitle) {
		<div
			hx-post={ getfinhelpCtgPOSTURL }
			hx-target="this"
			hx-swap="outerHTML"
			hx-trigger="load"
		></div>
	}
}
