package classview

import (
	"github.com/mangustc/obd/view"
	"github.com/mangustc/obd/schema"
	"github.com/mangustc/obd/schema/classschema"
	"fmt"
	"time"
)

const (
	pageTitle       = "Расписание"
	tableTitle      = pageTitle
	insertFormTitle = "Пары"
	getPOSTURL      = "/api/class/getclasss"
	insertPOSTURL   = "/api/class/insertclass"
	editPOSTURL     = "/api/class/editclass"
	updatePOSTURL   = "/api/class/updateclass"
	deletePOSTURL   = "/api/class/deleteclass"
	classTN         = "Class"
	classTypeTN     = "ClassType"
	profTN          = "Prof"
	cabinetTN       = "Cabinet"
	courseTN        = "Course"
	groupTN         = "Group"
	bodyVals        = `{"` + classTN + `ID": %d}`
	getclassPOSTURL = "/api/class"
)

var (
	taClassTypeID = schema.NewTA(classTypeTN+"ID", "Тип пары", schema.OptionInput)
	taProfID      = schema.NewTA(profTN+"ID", "Преподаватель", schema.OptionInput)
	taCabinetID   = schema.NewTA(cabinetTN+"ID", "Кабинет", schema.OptionInput)
	taCourseID    = schema.NewTA(courseTN+"ID", "Дисциплина", schema.OptionInput)
	taGroupID     = schema.NewTA(groupTN+"ID", "Группа", schema.OptionInput)
	taClassStart  = schema.NewTA(classTN+"Start", "Дата пары", schema.StringInput)
	taClassNumber = schema.NewTA(classTN+"Number", "Номер пары", schema.NumberInput)
)

func getTableHeaders() []*schema.TableHeaderColumn {
	return []*schema.TableHeaderColumn{
		schema.NewTableHeaderColumn(taClassTypeID.TATitle, 10),
		schema.NewTableHeaderColumn(taProfID.TATitle, 15),
		schema.NewTableHeaderColumn(taCabinetID.TATitle, 5),
		schema.NewTableHeaderColumn(taCourseID.TATitle, 25),
		schema.NewTableHeaderColumn(taGroupID.TATitle, 10),
		schema.NewTableHeaderColumn(taClassStart.TATitle, 10),
		schema.NewTableHeaderColumn(taClassNumber.TATitle, 5),
	}
}

func getInsertFormInputs(
	classTypeInputOptions []*schema.InputOption,
	profInputOptions []*schema.InputOption,
	cabinetInputOptions []*schema.InputOption,
	courseInputOptions []*schema.InputOption,
	groupInputOptions []*schema.InputOption,
) []*schema.Input {
	return []*schema.Input{
		schema.NewInput(taClassTypeID.TATitle, taClassTypeID.TAName, taClassTypeID.TAInputType, "", nil, classTypeInputOptions, ""),
		schema.NewInput(taProfID.TATitle, taProfID.TAName, taProfID.TAInputType, "", nil, profInputOptions, ""),
		schema.NewInput(taCabinetID.TATitle, taCabinetID.TAName, taCabinetID.TAInputType, "", nil, cabinetInputOptions, ""),
		schema.NewInput(taCourseID.TATitle, taCourseID.TAName, taCourseID.TAInputType, "", nil, courseInputOptions, ""),
		schema.NewInput(taGroupID.TATitle, taGroupID.TAName, taGroupID.TAInputType, "", nil, groupInputOptions, ""),
		schema.NewInput(taClassStart.TATitle, taClassStart.TAName, taClassStart.TAInputType, "", nil, nil, ""),
		schema.NewInput(taClassNumber.TATitle, taClassNumber.TAName, taClassNumber.TAInputType, "", nil, nil, ""),
	}
}

func getInputsFromClassDB(classDB *classschema.ClassDB,
	classTypeInputOptions []*schema.InputOption,
	profInputOptions []*schema.InputOption,
	cabinetInputOptions []*schema.InputOption,
	courseInputOptions []*schema.InputOption,
	groupInputOptions []*schema.InputOption,
) []*schema.Input {
	return []*schema.Input{
		schema.NewInput("", taClassTypeID.TAName, taClassTypeID.TAInputType, classDB.ClassTypeID, nil, classTypeInputOptions, fmt.Sprint(classDB.ClassTypeID)),
		schema.NewInput("", taProfID.TAName, taProfID.TAInputType, classDB.ProfID, nil, profInputOptions, fmt.Sprint(classDB.ProfID)),
		schema.NewInput("", taCabinetID.TAName, taCabinetID.TAInputType, classDB.CabinetID, nil, cabinetInputOptions, fmt.Sprint(classDB.CabinetID)),
		schema.NewInput("", taCourseID.TAName, taCourseID.TAInputType, classDB.CourseID, nil, courseInputOptions, fmt.Sprint(classDB.CourseID)),
		schema.NewInput("", taGroupID.TAName, taGroupID.TAInputType, classDB.GroupID, nil, groupInputOptions, fmt.Sprint(classDB.GroupID)),
		schema.NewInput("", taClassStart.TAName, taClassStart.TAInputType, classDB.ClassStart, nil, nil, ""),
		schema.NewInput("", taClassNumber.TAName, taClassNumber.TAInputType, classDB.ClassNumber, nil, nil, ""),
	}
}

templ ClassTableRowEdit(classDB *classschema.ClassDB,
	classTypeInputOptions []*schema.InputOption,
	profInputOptions []*schema.InputOption,
	cabinetInputOptions []*schema.InputOption,
	courseInputOptions []*schema.InputOption,
	groupInputOptions []*schema.InputOption,
) {
	@view.TableRowEdit(getInputsFromClassDB(classDB,
		classTypeInputOptions,
		profInputOptions,
		cabinetInputOptions,
		courseInputOptions,
		groupInputOptions,
	), fmt.Sprintf(bodyVals, classDB.ClassID), updatePOSTURL, deletePOSTURL)
}

templ ClassTableRow(classDB *classschema.ClassDB,
	classTypeInputOptions []*schema.InputOption,
	profInputOptions []*schema.InputOption,
	cabinetInputOptions []*schema.InputOption,
	courseInputOptions []*schema.InputOption,
	groupInputOptions []*schema.InputOption,
) {
	@view.TableRow(getInputsFromClassDB(classDB,
		classTypeInputOptions,
		profInputOptions,
		cabinetInputOptions,
		courseInputOptions,
		groupInputOptions,
	), fmt.Sprintf(bodyVals, classDB.ClassID), editPOSTURL, deletePOSTURL)
}

templ ClassTableRows(classsDB []*classschema.ClassDB,
	classTypeInputOptions []*schema.InputOption,
	profInputOptions []*schema.InputOption,
	cabinetInputOptions []*schema.InputOption,
	courseInputOptions []*schema.InputOption,
	groupInputOptions []*schema.InputOption,
) {
	for _, classDB := range classsDB {
		@ClassTableRow(classDB,
			classTypeInputOptions,
			profInputOptions,
			cabinetInputOptions,
			courseInputOptions,
			groupInputOptions,
		)
	}
}

templ Class(
	classTypeInputOptions []*schema.InputOption,
	profInputOptions []*schema.InputOption,
	cabinetInputOptions []*schema.InputOption,
	courseInputOptions []*schema.InputOption,
	groupInputOptions []*schema.InputOption,
) {
	<div id="filterClassContainer" style="display: flex; flex-direction: column;">
		<script src={ "/js/filterclass.js?date=" + time.Now().String() }></script>
		<div>
			<button onclick="toggleUI()">Режим печати</button>
			<button id="downloadPDF" style="display: none;" onclick="printTable()">Экспортировать PDF</button>
		</div>
		<div id="filterContainer" style="display: none;">
			<div>
				<input id="dateStart" name="dateStart" placeholder="2024-12-09" value="2024-12-09" type="text"/>
				<input id="dateEnd" name="dateEnd" placeholder="2024-12-15" value="2024-12-15" type="text"/>
			</div>
			<div>
				<select id="column" name="column">
					<option label="Группа" value="group"></option>
					<option label="Кабинет" value="cabinet"></option>
					<option label="Преподаватель" value="prof"></option>
				</select>
				<input id="searchTerm" name="searchTerm" placeholder="Поиск" value="422-3" type="text"/>
			</div>
			<div>
				<button onclick="filterTable()">Отфильтровать</button>
				<button onclick="returnTableRows()">Сбросить</button>
			</div>
		</div>
	</div>
	<h3 style="display: none;" id="classFiltersTitle"></h3>
	@view.InsertForm(insertFormTitle, insertPOSTURL, getInsertFormInputs(
		classTypeInputOptions,
		profInputOptions,
		cabinetInputOptions,
		courseInputOptions,
		groupInputOptions,
	))
	@view.Table(tableTitle, getPOSTURL, getTableHeaders())
}

templ ClassPage() {
	@view.Layout(pageTitle) {
		<div
			hx-post={ getclassPOSTURL }
			hx-target="this"
			hx-swap="outerHTML"
			hx-trigger="load"
		></div>
	}
}
