// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package classview

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/mangustc/obd/schema"
	"github.com/mangustc/obd/schema/classschema"
	"github.com/mangustc/obd/view"
)

const (
	pageTitle       = "Расписание"
	tableTitle      = pageTitle
	insertFormTitle = "Пары"
	getPOSTURL      = "/api/class/getclasss"
	insertPOSTURL   = "/api/class/insertclass"
	editPOSTURL     = "/api/class/editclass"
	updatePOSTURL   = "/api/class/updateclass"
	deletePOSTURL   = "/api/class/deleteclass"
	classTN         = "Class"
	classTypeTN     = "ClassType"
	profTN          = "Prof"
	cabinetTN       = "Cabinet"
	courseTN        = "Course"
	groupTN         = "Group"
	bodyVals        = `{"` + classTN + `ID": %d}`
	getclassPOSTURL = "/api/class"
)

var (
	taClassTypeID = schema.NewTA(classTypeTN+"ID", "Тип пары", schema.OptionInput)
	taProfID      = schema.NewTA(profTN+"ID", "Преподаватель", schema.OptionInput)
	taCabinetID   = schema.NewTA(cabinetTN+"ID", "Кабинет", schema.OptionInput)
	taCourseID    = schema.NewTA(courseTN+"ID", "Дисциплина", schema.OptionInput)
	taGroupID     = schema.NewTA(groupTN+"ID", "Группа", schema.OptionInput)
	taClassStart  = schema.NewTA(classTN+"Start", "Дата пары", schema.StringInput)
	taClassNumber = schema.NewTA(classTN+"Number", "Номер пары", schema.NumberInput)
)

func getTableHeaders() []*schema.TableHeaderColumn {
	return []*schema.TableHeaderColumn{
		schema.NewTableHeaderColumn(taClassTypeID.TATitle, 10),
		schema.NewTableHeaderColumn(taProfID.TATitle, 15),
		schema.NewTableHeaderColumn(taCabinetID.TATitle, 5),
		schema.NewTableHeaderColumn(taCourseID.TATitle, 25),
		schema.NewTableHeaderColumn(taGroupID.TATitle, 10),
		schema.NewTableHeaderColumn(taClassStart.TATitle, 10),
		schema.NewTableHeaderColumn(taClassNumber.TATitle, 5),
	}
}

func getInsertFormInputs(
	classTypeInputOptions []*schema.InputOption,
	profInputOptions []*schema.InputOption,
	cabinetInputOptions []*schema.InputOption,
	courseInputOptions []*schema.InputOption,
	groupInputOptions []*schema.InputOption,
) []*schema.Input {
	return []*schema.Input{
		schema.NewInput(taClassTypeID.TATitle, taClassTypeID.TAName, taClassTypeID.TAInputType, "", nil, classTypeInputOptions, ""),
		schema.NewInput(taProfID.TATitle, taProfID.TAName, taProfID.TAInputType, "", nil, profInputOptions, ""),
		schema.NewInput(taCabinetID.TATitle, taCabinetID.TAName, taCabinetID.TAInputType, "", nil, cabinetInputOptions, ""),
		schema.NewInput(taCourseID.TATitle, taCourseID.TAName, taCourseID.TAInputType, "", nil, courseInputOptions, ""),
		schema.NewInput(taGroupID.TATitle, taGroupID.TAName, taGroupID.TAInputType, "", nil, groupInputOptions, ""),
		schema.NewInput(taClassStart.TATitle, taClassStart.TAName, taClassStart.TAInputType, "", nil, nil, ""),
		schema.NewInput(taClassNumber.TATitle, taClassNumber.TAName, taClassNumber.TAInputType, "", nil, nil, ""),
	}
}

func getInputsFromClassDB(classDB *classschema.ClassDB,
	classTypeInputOptions []*schema.InputOption,
	profInputOptions []*schema.InputOption,
	cabinetInputOptions []*schema.InputOption,
	courseInputOptions []*schema.InputOption,
	groupInputOptions []*schema.InputOption,
) []*schema.Input {
	return []*schema.Input{
		schema.NewInput("", taClassTypeID.TAName, taClassTypeID.TAInputType, classDB.ClassTypeID, nil, classTypeInputOptions, fmt.Sprint(classDB.ClassTypeID)),
		schema.NewInput("", taProfID.TAName, taProfID.TAInputType, classDB.ProfID, nil, profInputOptions, fmt.Sprint(classDB.ProfID)),
		schema.NewInput("", taCabinetID.TAName, taCabinetID.TAInputType, classDB.CabinetID, nil, cabinetInputOptions, fmt.Sprint(classDB.CabinetID)),
		schema.NewInput("", taCourseID.TAName, taCourseID.TAInputType, classDB.CourseID, nil, courseInputOptions, fmt.Sprint(classDB.CourseID)),
		schema.NewInput("", taGroupID.TAName, taGroupID.TAInputType, classDB.GroupID, nil, groupInputOptions, fmt.Sprint(classDB.GroupID)),
		schema.NewInput("", taClassStart.TAName, taClassStart.TAInputType, classDB.ClassStart, nil, nil, ""),
		schema.NewInput("", taClassNumber.TAName, taClassNumber.TAInputType, classDB.ClassNumber, nil, nil, ""),
	}
}

func ClassTableRowEdit(classDB *classschema.ClassDB,
	classTypeInputOptions []*schema.InputOption,
	profInputOptions []*schema.InputOption,
	cabinetInputOptions []*schema.InputOption,
	courseInputOptions []*schema.InputOption,
	groupInputOptions []*schema.InputOption,
) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = view.TableRowEdit(getInputsFromClassDB(classDB,
			classTypeInputOptions,
			profInputOptions,
			cabinetInputOptions,
			courseInputOptions,
			groupInputOptions,
		), fmt.Sprintf(bodyVals, classDB.ClassID), updatePOSTURL, deletePOSTURL).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func ClassTableRow(classDB *classschema.ClassDB,
	classTypeInputOptions []*schema.InputOption,
	profInputOptions []*schema.InputOption,
	cabinetInputOptions []*schema.InputOption,
	courseInputOptions []*schema.InputOption,
	groupInputOptions []*schema.InputOption,
) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = view.TableRow(getInputsFromClassDB(classDB,
			classTypeInputOptions,
			profInputOptions,
			cabinetInputOptions,
			courseInputOptions,
			groupInputOptions,
		), fmt.Sprintf(bodyVals, classDB.ClassID), editPOSTURL, deletePOSTURL).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func ClassTableRows(classsDB []*classschema.ClassDB,
	classTypeInputOptions []*schema.InputOption,
	profInputOptions []*schema.InputOption,
	cabinetInputOptions []*schema.InputOption,
	courseInputOptions []*schema.InputOption,
	groupInputOptions []*schema.InputOption,
) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		for _, classDB := range classsDB {
			templ_7745c5c3_Err = ClassTableRow(classDB,
				classTypeInputOptions,
				profInputOptions,
				cabinetInputOptions,
				courseInputOptions,
				groupInputOptions,
			).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return templ_7745c5c3_Err
	})
}

func Class(
	classTypeInputOptions []*schema.InputOption,
	profInputOptions []*schema.InputOption,
	cabinetInputOptions []*schema.InputOption,
	courseInputOptions []*schema.InputOption,
	groupInputOptions []*schema.InputOption,
) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"filterClassContainer\" style=\"display: flex; flex-direction: column;\"><script src=\"/js/filterclass.js\"></script><div><button onclick=\"toggleUI()\">Режим печати</button> <button id=\"downloadPDF\" style=\"display: none;\" onclick=\"printTable()\">Экспортировать PDF</button></div><div id=\"filterContainer\" style=\"display: none;\"><div><input id=\"dateStart\" name=\"dateStart\" placeholder=\"2024-12-10\" value=\"2024-12-10\" type=\"text\"> <input id=\"dateEnd\" name=\"dateEnd\" placeholder=\"2024-12-13\" value=\"2024-12-13\" type=\"text\"></div><div><select id=\"column\" name=\"column\"><option label=\"Группа\" value=\"group\"></option> <option label=\"Кабинет\" value=\"cabinet\"></option> <option label=\"Преподаватель\" value=\"prof\"></option></select> <input id=\"searchTerm\" name=\"searchTerm\" placeholder=\"Поиск\" value=\"422-3\" type=\"text\"></div><div><button onclick=\"filterTable()\">Отфильтровать</button> <button onclick=\"returnTableRows()\">Сбросить</button></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = view.InsertForm(insertFormTitle, insertPOSTURL, getInsertFormInputs(
			classTypeInputOptions,
			profInputOptions,
			cabinetInputOptions,
			courseInputOptions,
			groupInputOptions,
		)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = view.Table(tableTitle, getPOSTURL, getTableHeaders()).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func ClassPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var6 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div hx-post=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(getclassPOSTURL)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/classview/classview.templ`, Line: 182, Col: 28}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" hx-target=\"this\" hx-swap=\"outerHTML\" hx-trigger=\"load\"></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = view.Layout(pageTitle).Render(templ.WithChildren(ctx, templ_7745c5c3_Var6), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
